package com.whereq.llm.openai.vo.completion.chat;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.whereq.llm.gpt.vo.BaseVO;

/**
 * A chat completion generated by OpenAI
 * The json property has the different name "delta" for streaming and "message" for non-streaming.
 *
 * Have a separate class for streaming and non-streaming to avoid the confusion of the json property name when generate the response from whereq side.
 */
public class StreamChatCompletionChoice extends BaseVO {

    /**
     * This index of this completion in the returned list.
     */
    Integer index;

    /**
     * The {@link ChatMessageRole#assistant} message or delta (when streaming) which was generated
     */
    @JsonProperty("delta")
    ChatMessage message;

    /**
     * The reason why GPT stopped generating, for example "length".
     */
    @JsonProperty("finish_reason")
    String finishReason;

    public StreamChatCompletionChoice() {}

    public StreamChatCompletionChoice(Integer index, ChatMessage message, String finishReason) {
        this.index = index;
        this.message = message;
        this.finishReason = finishReason;
    }

    public Integer getIndex() {
        return index;
    }

    public void setIndex(Integer index) {
        this.index = index;
    }

    public ChatMessage getMessage() {
        return message;
    }

    public void setMessage(ChatMessage message) {
        this.message = message;
    }

    public String getFinishReason() {
        return finishReason;
    }

    public void setFinishReason(String finishReason) {
        this.finishReason = finishReason;
    }

    public String toString() {
        return "ChatCompletionChoice [index=" + index + ", message=" + message + ", finishReason=" + finishReason + "]";
    }
}
